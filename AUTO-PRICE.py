#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
AUTO-PRICE - ·ª®ng d·ª•ng t·ª± ƒë·ªông h√≥a b·∫£ng gi√° A4 v√† A5
K·∫øt h·ª£p t√≠nh nƒÉng t·ª´ A4-AUTO.py v√† A5-AUTO.py v·ªõi giao di·ªán th·ªëng nh·∫•t
"""

import pandas as pd
from docxtpl import DocxTemplate
import os
from pypdf import PdfWriter
import subprocess
import tkinter as tk
from tkinter import ttk, filedialog, messagebox, font
import json
import time
import threading
import warnings
from docx import Document
from docx.shared import Inches, Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH
import platform
import shutil

# T·∫Øt warnings kh√¥ng c·∫ßn thi·∫øt
warnings.filterwarnings("ignore", category=UserWarning, module="docxcompose")
warnings.filterwarnings("ignore", category=UserWarning, module="openpyxl")

class PDFConverter:
    """L·ªõp chuy·ªÉn ƒë·ªïi PDF v·ªõi nhi·ªÅu c√¥ng c·ª• kh√°c nhau"""
    
    def __init__(self, config):
        self.config = config
        self.available_tools = self.detect_available_tools()
        self.current_tool = self.select_best_tool()
    
    def detect_available_tools(self):
        """Ph√°t hi·ªán c√°c c√¥ng c·ª• chuy·ªÉn ƒë·ªïi PDF c√≥ s·∫µn"""
        tools = {}
        
        # 1. Ki·ªÉm tra python-docx2pdf (C√îNG C·ª§ T·ªêT NH·∫§T)
        try:
            import docx2pdf
            tools['docx2pdf'] = {
                'name': 'python-docx2pdf',
                'priority': 1,
                'available': True,
                'description': 'üöÄ TH·ª¶ VI·ªÜN PYTHON THU·∫¶N T√öY - NHANH V√Ä NH·∫∏ NH·∫§T (Khuy·∫øn ngh·ªã)'
            }
        except ImportError:
            tools['docx2pdf'] = {
                'name': 'python-docx2pdf',
                'priority': 1,
                'available': False,
                'description': 'C·∫ßn c√†i ƒë·∫∑t: pip install docx2pdf (Khuy·∫øn ngh·ªã)'
            }
        
        # 2. Ki·ªÉm tra LibreOffice (h·ªó tr·ª£ c·∫£ b·∫£n c√†i ƒë·∫∑t v√† Portable)
        configured_path = self.config.get('libreoffice_path', r"C:\\Program Files\\LibreOffice\\program\\soffice.exe")
        env_path = os.environ.get('LIBREOFFICE_PATH')
        candidate_paths = [
            configured_path,
            env_path if env_path else '',
            os.path.join(os.getcwd(), 'LibreOfficePortable', 'App', 'libreoffice', 'program', 'soffice.exe'),
            os.path.join(os.getcwd(), 'LibreOfficePortable', 'App', 'libreoffice', 'program', 'soffice.com'),
            os.path.join(os.getcwd(), 'libreoffice', 'program', 'soffice.exe'),
            os.path.join(os.getcwd(), 'libreoffice', 'program', 'soffice.com'),
            os.path.join(os.getcwd(), 'bin', 'LibreOffice', 'program', 'soffice.exe'),
            os.path.join(os.getcwd(), 'bin', 'LibreOffice', 'program', 'soffice.com'),
        ]
        detected_lo_path = next((p for p in candidate_paths if p and os.path.exists(p)), None)
        if detected_lo_path:
            tools['libreoffice'] = {
                'name': 'LibreOffice',
                'priority': 2,
                'available': True,
                'description': 'LibreOffice/LibreOffice Portable (fallback, kh√¥ng c·∫ßn c√†i ƒë·∫∑t n·∫øu d√πng Portable)',
                'path': detected_lo_path
            }
        else:
            tools['libreoffice'] = {
                'name': 'LibreOffice',
                'priority': 2,
                'available': False,
                'description': 'Kh√¥ng t√¨m th·∫•y LibreOffice. C√≥ th·ªÉ d√πng LibreOffice Portable (gi·∫£i n√©n c·∫°nh ·ª©ng d·ª•ng) ho·∫∑c ch·ªçn ƒë∆∞·ªùng d·∫´n th·ªß c√¥ng.'
            }
        
        return tools
    
    def select_best_tool(self):
        """Ch·ªçn c√¥ng c·ª• t·ªët nh·∫•t c√≥ s·∫µn"""
        available_tools = [tool for tool, info in self.available_tools.items() 
                          if info['available']]
        
        if not available_tools:
            raise Exception("Kh√¥ng t√¨m th·∫•y c√¥ng c·ª• chuy·ªÉn ƒë·ªïi PDF n√†o!")
        
        # Ch·ªçn c√¥ng c·ª• c√≥ priority th·∫•p nh·∫•t (t·ªët nh·∫•t)
        best_tool = min(available_tools, 
                       key=lambda x: self.available_tools[x]['priority'])
        
        return best_tool
    
    def convert_to_pdf(self, word_file):
        """Chuy·ªÉn ƒë·ªïi Word sang PDF s·ª≠ d·ª•ng c√¥ng c·ª• ƒë∆∞·ª£c ch·ªçn"""
        try:
            # ∆Øu ti√™n s·ª≠ d·ª•ng python-docx2pdf (c√¥ng c·ª• t·ªët nh·∫•t)
            if self.current_tool == 'docx2pdf':
                result = self._convert_with_docx2pdf(word_file)
                if result:
                    return result
                else:
                    print("‚ö†Ô∏è python-docx2pdf th·∫•t b·∫°i, th·ª≠ fallback...")
                    return self._fallback_convert(word_file)
            elif self.current_tool == 'libreoffice':
                return self._convert_with_libreoffice(word_file)
            else:
                raise Exception(f"C√¥ng c·ª• kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {self.current_tool}")
                
        except Exception as e:
            print(f"‚ùå L·ªói v·ªõi {self.current_tool}: {e}")
            # Th·ª≠ fallback sang c√¥ng c·ª• kh√°c
            return self._fallback_convert(word_file)
    
    def _convert_with_docx2pdf(self, word_file):
        """Chuy·ªÉn ƒë·ªïi s·ª≠ d·ª•ng python-docx2pdf (C√îNG C·ª§ T·ªêT NH·∫§T)"""
        try:
            import docx2pdf
            pdf_file = os.path.splitext(word_file)[0] + ".pdf"
            
            # T·ªëi ∆∞u h√≥a cho docx2pdf
            print(f"üîÑ ƒêang chuy·ªÉn ƒë·ªïi v·ªõi python-docx2pdf (c√¥ng c·ª• t·ªët nh·∫•t)...")
            
            # Chuy·ªÉn ƒë·ªïi v·ªõi timeout v√† error handling t·ªët h∆°n
            docx2pdf.convert(word_file, pdf_file)
            
            # Ki·ªÉm tra k·∫øt qu·∫£
            if os.path.exists(pdf_file):
                file_size = os.path.getsize(pdf_file)
                print(f"‚úÖ Chuy·ªÉn ƒë·ªïi th√†nh c√¥ng: {os.path.basename(pdf_file)} ({file_size:,} bytes)")
                return pdf_file
            else:
                print(f"‚ùå Kh√¥ng t·∫°o ƒë∆∞·ª£c file PDF: {pdf_file}")
                return None
                
        except Exception as e:
            print(f"‚ùå L·ªói docx2pdf: {e}")
            return None
    
    def _convert_with_libreoffice(self, word_file):
        """Chuy·ªÉn ƒë·ªïi s·ª≠ d·ª•ng LibreOffice (fallback)"""
        try:
            libreoffice_path = self.available_tools['libreoffice']['path']
            
            result = subprocess.run([
                libreoffice_path,
                "--headless", "--convert-to", "pdf",
                word_file, "--outdir", os.path.dirname(word_file)
            ], check=True, capture_output=True, timeout=60)
            
            pdf_file = os.path.splitext(word_file)[0] + ".pdf"
            
            if os.path.exists(pdf_file):
                return pdf_file
            else:
                # Th·ª≠ t√¨m file trong th∆∞ m·ª•c con
                subfolder = os.path.join(os.path.dirname(word_file), "In_PDF")
                if os.path.exists(subfolder):
                    subfolder_pdf = os.path.join(subfolder, os.path.basename(pdf_file))
                    if os.path.exists(subfolder_pdf):
                        return subfolder_pdf
                
                return None
                
        except subprocess.TimeoutExpired:
            print(f"Timeout LibreOffice: {word_file}")
            return None
        except Exception as e:
            print(f"L·ªói LibreOffice: {e}")
            return None
    
    def _fallback_convert(self, word_file):
        """Fallback sang c√¥ng c·ª• kh√°c n·∫øu c√¥ng c·ª• ch√≠nh l·ªói"""
        available_tools = [tool for tool, info in self.available_tools.items() 
                          if info['available'] and tool != self.current_tool]
        
        # S·∫Øp x·∫øp theo ƒë·ªô ∆∞u ti√™n (docx2pdf tr∆∞·ªõc)
        available_tools.sort(key=lambda x: self.available_tools[x]['priority'])
        
        for tool in available_tools:
            try:
                print(f"üîÑ Th·ª≠ fallback sang {tool}...")
                if tool == 'docx2pdf':
                    result = self._convert_with_docx2pdf(word_file)
                elif tool == 'libreoffice':
                    result = self._convert_with_libreoffice(word_file)
                
                if result:
                    print(f"‚úÖ Fallback th√†nh c√¥ng v·ªõi {tool}")
                    return result
                    
            except Exception as e:
                print(f"‚ùå Fallback {tool} th·∫•t b·∫°i: {e}")
                continue
        
        print("‚ùå T·∫•t c·∫£ c√¥ng c·ª• fallback ƒë·ªÅu th·∫•t b·∫°i!")
        return None
    
    def get_tool_info(self):
        """L·∫•y th√¥ng tin v·ªÅ c√¥ng c·ª• hi·ªán t·∫°i"""
        return self.available_tools.get(self.current_tool, {})
    
    def get_all_tools_info(self):
        """L·∫•y th√¥ng tin v·ªÅ t·∫•t c·∫£ c√¥ng c·ª•"""
        return self.available_tools

class ConfigManager:
    def __init__(self, config_file="config.json"):
        self.config_file = config_file
        self.default_config = {
            "a4_excel_file": "A4-Auto.xlsx",
            "a4_word_template": "A4-Auto.docx",
            "a5_excel_file": "A5-AUTO.xlsx",
            "a5_word_template": "A5-AUTO.docx",
            "output_folder": "In_PDF",
            "libreoffice_path": r"C:\\Program Files\\LibreOffice\\program\\soffice.exe",
            "batch_size": 10,
            "default_format": "A5",  # A4 ho·∫∑c A5
            "preferred_tool": ""  # ''=auto; 'docx2pdf' ho·∫∑c 'libreoffice'
        }
        self.config = self.load_config()
    
    def load_config(self):
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    return {**self.default_config, **json.load(f)}
            else:
                self.save_config(self.default_config)
                return self.default_config
        except Exception as e:
            print(f"L·ªói khi ƒë·ªçc config: {e}")
            return self.default_config
    
    def save_config(self, config):
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"L·ªói khi l∆∞u config: {e}")
    
    def update_config(self, key, value):
        self.config[key] = value
        self.save_config(self.config)

class ProgressTracker:
    def __init__(self, total_steps):
        self.total_steps = total_steps
        self.current_step = 0
    
    def update(self, step=1):
        self.current_step += step
    
    def get_progress(self):
        return (self.current_step / self.total_steps) * 100 if self.total_steps > 0 else 0

class AutoPriceGUI:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("AUTO-PRICE - T·ª± ƒë·ªông h√≥a b·∫£ng gi√° A4 & A5")
        self.root.geometry("900x800")
        self.root.resizable(True, True)
        
        self.config = ConfigManager()
        self.converter = PDFConverter(self.config.config)
        self.setup_ui()
        self.refresh_tools()
        
    def setup_ui(self):
        # Frame ch√≠nh
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Ti√™u ƒë·ªÅ
        title_label = ttk.Label(main_frame, text="AUTO-PRICE - T·ª± ƒë·ªông h√≥a b·∫£ng gi√°", 
                               font=("Arial", 16, "bold"))
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 20))
        
        # Ch·ªçn format
        format_frame = ttk.LabelFrame(main_frame, text="Ch·ªçn ƒë·ªãnh d·∫°ng", padding="10")
        format_frame.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        self.format_var = tk.StringVar(value=self.config.config["default_format"])
        ttk.Radiobutton(format_frame, text="A4 - M·ªôt s·∫£n ph·∫©m/trang", 
                       variable=self.format_var, value="A4", 
                       command=self.on_format_change).grid(row=0, column=0, padx=(0, 20))
        ttk.Radiobutton(format_frame, text="A5 - Hai s·∫£n ph·∫©m/trang", 
                       variable=self.format_var, value="A5", 
                       command=self.on_format_change).grid(row=0, column=1)
        
        # C·∫•u h√¨nh file A4
        self.a4_frame = ttk.LabelFrame(main_frame, text="C·∫•u h√¨nh A4", padding="10")
        self.a4_frame.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # Excel file A4
        ttk.Label(self.a4_frame, text="File Excel A4:").grid(row=0, column=0, sticky=tk.W)
        self.a4_excel_var = tk.StringVar(value=self.config.config["a4_excel_file"])
        a4_excel_entry = ttk.Entry(self.a4_frame, textvariable=self.a4_excel_var, width=50)
        a4_excel_entry.grid(row=0, column=1, padx=(10, 5))
        ttk.Button(self.a4_frame, text="Ch·ªçn", command=self.browse_a4_excel).grid(row=0, column=2)
        ttk.Button(self.a4_frame, text="M·ªü", command=self.open_a4_excel).grid(row=0, column=3, padx=(5, 0))
        
        # Word template A4
        ttk.Label(self.a4_frame, text="Template Word A4:").grid(row=1, column=0, sticky=tk.W, pady=(10, 0))
        self.a4_template_var = tk.StringVar(value=self.config.config["a4_word_template"])
        a4_template_entry = ttk.Entry(self.a4_frame, textvariable=self.a4_template_var, width=50)
        a4_template_entry.grid(row=1, column=1, padx=(10, 5), pady=(10, 0))
        ttk.Button(self.a4_frame, text="Ch·ªçn", command=self.browse_a4_template).grid(row=1, column=2, pady=(10, 0))
        ttk.Button(self.a4_frame, text="M·ªü", command=self.open_a4_template).grid(row=1, column=3, pady=(10, 0), padx=(5, 0))
        
        # C·∫•u h√¨nh file A5
        self.a5_frame = ttk.LabelFrame(main_frame, text="C·∫•u h√¨nh A5", padding="10")
        self.a5_frame.grid(row=3, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # Excel file A5
        ttk.Label(self.a5_frame, text="File Excel A5:").grid(row=0, column=0, sticky=tk.W)
        self.a5_excel_var = tk.StringVar(value=self.config.config["a5_excel_file"])
        a5_excel_entry = ttk.Entry(self.a5_frame, textvariable=self.a5_excel_var, width=50)
        a5_excel_entry.grid(row=0, column=1, padx=(10, 5))
        ttk.Button(self.a5_frame, text="Ch·ªçn", command=self.browse_a5_excel).grid(row=0, column=2)
        ttk.Button(self.a5_frame, text="M·ªü", command=self.open_a5_excel).grid(row=0, column=3, padx=(5, 0))
        
        # Word template A5
        ttk.Label(self.a5_frame, text="Template Word A5:").grid(row=1, column=0, sticky=tk.W, pady=(10, 0))
        self.a5_template_var = tk.StringVar(value=self.config.config["a5_word_template"]) 
        a5_template_entry = ttk.Entry(self.a5_frame, textvariable=self.a5_template_var, width=50)
        a5_template_entry.grid(row=1, column=1, padx=(10, 5), pady=(10, 0))
        ttk.Button(self.a5_frame, text="Ch·ªçn", command=self.browse_a5_template).grid(row=1, column=2, pady=(10, 0))
        ttk.Button(self.a5_frame, text="M·ªü", command=self.open_a5_template).grid(row=1, column=3, pady=(10, 0), padx=(5, 0))
        
        # Output folder
        output_frame = ttk.LabelFrame(main_frame, text="Th∆∞ m·ª•c xu·∫•t", padding="10")
        output_frame.grid(row=4, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        ttk.Label(output_frame, text="Th∆∞ m·ª•c xu·∫•t:").grid(row=0, column=0, sticky=tk.W)
        self.output_var = tk.StringVar(value=self.config.config["output_folder"])
        output_entry = ttk.Entry(output_frame, textvariable=self.output_var, width=50)
        output_entry.grid(row=0, column=1, padx=(10, 5))
        ttk.Button(output_frame, text="Ch·ªçn", command=self.browse_output).grid(row=0, column=2)
        ttk.Button(output_frame, text="M·ªü", command=self.open_output_folder).grid(row=0, column=3, padx=(5, 0))
        
        # PDF Converter Tools
        config_frame = ttk.LabelFrame(main_frame, text="C√¥ng c·ª• chuy·ªÉn ƒë·ªïi PDF", padding="10")
        config_frame.grid(row=5, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # Tool selection
        ttk.Label(config_frame, text="C√¥ng c·ª• chuy·ªÉn ƒë·ªïi:").grid(row=0, column=0, sticky=tk.W)
        self.tool_var = tk.StringVar(value=self.config.config.get("preferred_tool", ""))
        self.tool_combo = ttk.Combobox(config_frame, textvariable=self.tool_var, width=25, state="readonly")
        self.tool_combo.grid(row=0, column=1, padx=(10, 5), sticky=tk.W)
        self.tool_combo.bind("<<ComboboxSelected>>", self.on_tool_change)
        ttk.Button(config_frame, text="L√†m m·ªõi", command=self.refresh_tools).grid(row=0, column=2)
        
        # Tool info
        self.tool_info_var = tk.StringVar(value="ƒêang ki·ªÉm tra c√¥ng c·ª•...")
        ttk.Label(config_frame, textvariable=self.tool_info_var, wraplength=600).grid(row=1, column=0, columnspan=3, sticky=tk.W, pady=(5, 0))
        
        # LibreOffice path (h·ªó tr·ª£ c·∫£ b·∫£n Portable)
        ttk.Label(config_frame, text="ƒê∆∞·ªùng d·∫´n LibreOffice (c√≥ th·ªÉ l√† Portable):").grid(row=2, column=0, sticky=tk.W, pady=(10, 0))
        self.libreoffice_var = tk.StringVar(value=self.config.config["libreoffice_path"])
        libreoffice_entry = ttk.Entry(config_frame, textvariable=self.libreoffice_var, width=50)
        libreoffice_entry.grid(row=2, column=1, padx=(10, 5), pady=(10, 0))
        ttk.Button(config_frame, text="Ch·ªçn", command=self.browse_libreoffice).grid(row=2, column=2, pady=(10, 0))
        
        # Progress bar
        progress_frame = ttk.LabelFrame(main_frame, text="Ti·∫øn tr√¨nh x·ª≠ l√Ω", padding="10")
        progress_frame.grid(row=6, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(progress_frame, variable=self.progress_var, maximum=100, length=760, mode='determinate')
        self.progress_bar.grid(row=0, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 5))
        
        self.status_var = tk.StringVar(value="S·∫µn s√†ng")
        ttk.Label(progress_frame, textvariable=self.status_var).grid(row=1, column=0, columnspan=3)
        
        # Log
        log_frame = ttk.LabelFrame(main_frame, text="Log", padding="10")
        log_frame.grid(row=7, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        
        self.log_text = tk.Text(log_frame, height=8, width=100)
        scrollbar = ttk.Scrollbar(log_frame, orient=tk.VERTICAL, command=self.log_text.yview)
        self.log_text.configure(yscrollcommand=scrollbar.set)
        self.log_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        
        # Buttons
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=8, column=0, columnspan=3, pady=(10, 0))
        
        self.start_button = ttk.Button(button_frame, text="B·∫Øt ƒë·∫ßu x·ª≠ l√Ω", command=self.start_processing)
        self.start_button.grid(row=0, column=0, padx=(0, 10))
        
        ttk.Button(button_frame, text="Th√¥ng tin c√¥ng c·ª•", command=self.show_tools_info).grid(row=0, column=1, padx=(0, 10))
        ttk.Button(button_frame, text="L∆∞u c·∫•u h√¨nh", command=self.save_config).grid(row=0, column=2, padx=(0, 10))
        ttk.Button(button_frame, text="Tho√°t", command=self.root.quit).grid(row=0, column=3)
        
        # Configure grid weights
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.columnconfigure(2, weight=1)
        main_frame.rowconfigure(7, weight=1)
        self.a4_frame.columnconfigure(1, weight=1)
        self.a5_frame.columnconfigure(1, weight=1)
        output_frame.columnconfigure(1, weight=1)
        config_frame.columnconfigure(1, weight=1)
        progress_frame.columnconfigure(0, weight=1)
        log_frame.columnconfigure(0, weight=1)
        log_frame.rowconfigure(0, weight=1)
        
        # C·∫≠p nh·∫≠t hi·ªÉn th·ªã format
        self.on_format_change()
    
    def on_format_change(self):
        """C·∫≠p nh·∫≠t hi·ªÉn th·ªã khi thay ƒë·ªïi format"""
        current_format = self.format_var.get()
        if current_format == "A4":
            self.a4_frame.configure(text="C·∫•u h√¨nh A4 (ƒêang s·ª≠ d·ª•ng)")
            self.a5_frame.configure(text="C·∫•u h√¨nh A5")
        else:
            self.a4_frame.configure(text="C·∫•u h√¨nh A4")
            self.a5_frame.configure(text="C·∫•u h√¨nh A5 (ƒêang s·ª≠ d·ª•ng)")
    
    def log(self, message):
        """Ghi log v√†o text widget"""
        timestamp = time.strftime("%H:%M:%S")
        self.log_text.insert(tk.END, f"[{timestamp}] {message}\n")
        self.log_text.see(tk.END)
        self.root.update_idletasks()
    
    def browse_a4_excel(self):
        filename = filedialog.askopenfilename(
            title="Ch·ªçn file Excel A4",
            filetypes=[("Excel files", "*.xlsx *.xls"), ("All files", "*.*")]
        )
        if filename:
            self.a4_excel_var.set(filename)
    
    def browse_a4_template(self):
        filename = filedialog.askopenfilename(
            title="Ch·ªçn template Word A4",
            filetypes=[("Word files", "*.docx *.doc"), ("All files", "*.*")]
        )
        if filename:
            self.a4_template_var.set(filename)
    
    def _open_path(self, path):
        try:
            if not path:
                messagebox.showwarning("C·∫£nh b√°o", "ƒê∆∞·ªùng d·∫´n tr·ªëng.")
                return
            if not os.path.exists(path):
                messagebox.showerror("L·ªói", f"Kh√¥ng t√¨m th·∫•y: {path}")
                return
            if platform.system() == 'Windows':
                os.startfile(path)
            elif platform.system() == 'Darwin':
                subprocess.Popen(['open', path])
            else:
                subprocess.Popen(['xdg-open', path])
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ m·ªü file: {e}")

    def open_a4_excel(self):
        self._open_path(self.a4_excel_var.get())

    def open_a4_template(self):
        self._open_path(self.a4_template_var.get())
    
    def browse_a5_excel(self):
        filename = filedialog.askopenfilename(
            title="Ch·ªçn file Excel A5",
            filetypes=[("Excel files", "*.xlsx *.xls"), ("All files", "*.*")]
        )
        if filename:
            self.a5_excel_var.set(filename)
    
    def browse_a5_template(self):
        filename = filedialog.askopenfilename(
            title="Ch·ªçn template Word A5",
            filetypes=[("Word files", "*.docx *.doc"), ("All files", "*.*")]
        )
        if filename:
            self.a5_template_var.set(filename)
    
    def open_a5_excel(self):
        self._open_path(self.a5_excel_var.get())

    def open_a5_template(self):
        self._open_path(self.a5_template_var.get())
    
    def browse_output(self):
        folder = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c xu·∫•t")
        if folder:
            self.output_var.set(folder)
    
    def open_output_folder(self):
        """M·ªü th∆∞ m·ª•c xu·∫•t trong Explorer (t·∫°o n·∫øu ch∆∞a t·ªìn t·∫°i)"""
        try:
            folder = self.output_var.get()
            if not folder:
                messagebox.showwarning("C·∫£nh b√°o", "ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c xu·∫•t ƒëang tr·ªëng.")
                return
            if not os.path.exists(folder):
                os.makedirs(folder, exist_ok=True)
            self._open_path(folder)
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ m·ªü th∆∞ m·ª•c xu·∫•t: {e}")
    
    def refresh_tools(self):
        """L√†m m·ªõi danh s√°ch c√¥ng c·ª• chuy·ªÉn ƒë·ªïi"""
        try:
            # C·∫≠p nh·∫≠t converter v·ªõi config m·ªõi
            config = {
                "libreoffice_path": self.libreoffice_var.get()
            }
            self.converter = PDFConverter(config)
            
            # L·∫•y th√¥ng tin c√¥ng c·ª•
            all_tools = self.converter.get_all_tools_info()
            available_tools = []
            
            for tool_name, tool_info in all_tools.items():
                if tool_info['available']:
                    available_tools.append(tool_name)
            
            # C·∫≠p nh·∫≠t combobox
            self.tool_combo['values'] = available_tools
            # N·∫øu user c√≥ l∆∞u preferred_tool v√† n√≥ kh·∫£ d·ª•ng th√¨ d√πng n√≥
            preferred_tool = self.config.config.get("preferred_tool", "")
            if preferred_tool and preferred_tool in available_tools:
                self.converter.current_tool = preferred_tool
                self.tool_combo.set(preferred_tool)
            elif available_tools:
                # Kh√¥ng c√≥ preferred h·ª£p l·ªá: d√πng auto ch·ªçn t·ªët nh·∫•t
                self.tool_combo.set(self.converter.current_tool)
            
            # Hi·ªÉn th·ªã th√¥ng tin c√¥ng c·ª• hi·ªán t·∫°i
            current_tool_info = self.converter.get_tool_info()
            if current_tool_info:
                if current_tool_info['name'] == 'python-docx2pdf':
                    self.tool_info_var.set(f"üéØ ƒêang s·ª≠ d·ª•ng: {current_tool_info['name']} - {current_tool_info['description']}")
                else:
                    self.tool_info_var.set(f"‚ö†Ô∏è ƒêang s·ª≠ d·ª•ng: {current_tool_info['name']} - {current_tool_info['description']}")
            else:
                self.tool_info_var.set("‚ùå Kh√¥ng t√¨m th·∫•y c√¥ng c·ª• chuy·ªÉn ƒë·ªïi n√†o!")
                
        except Exception as e:
            self.tool_info_var.set(f"L·ªói khi ki·ªÉm tra c√¥ng c·ª•: {e}")

    def on_tool_change(self, event=None):
        """X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn c√¥ng c·ª• chuy·ªÉn ƒë·ªïi trong combobox"""
        try:
            selected_tool = self.tool_var.get()
            if selected_tool in self.converter.available_tools and self.converter.available_tools[selected_tool]['available']:
                self.converter.current_tool = selected_tool
                # L∆∞u l·∫°i l·ª±a ch·ªçn n√†y v√†o config ƒëang gi·ªØ trong b·ªô nh·ªõ
                self.config.update_config("preferred_tool", selected_tool)
                current_tool_info = self.converter.get_tool_info()
                if current_tool_info['name'] == 'python-docx2pdf':
                    self.tool_info_var.set(f"üéØ ƒêang s·ª≠ d·ª•ng: {current_tool_info['name']} - {current_tool_info['description']}")
                else:
                    self.tool_info_var.set(f"‚ö†Ô∏è ƒêang s·ª≠ d·ª•ng: {current_tool_info['name']} - {current_tool_info['description']}")
                self.log(f"ƒê√£ ch·ªçn c√¥ng c·ª• chuy·ªÉn ƒë·ªïi: {selected_tool}")
            else:
                messagebox.showwarning("C·∫£nh b√°o", "C√¥ng c·ª• ƒë∆∞·ª£c ch·ªçn kh√¥ng kh·∫£ d·ª•ng.")
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ thay ƒë·ªïi c√¥ng c·ª•: {e}")
    
    def browse_libreoffice(self):
        filename = filedialog.askopenfilename(
            title="Ch·ªçn file th·ª±c thi LibreOffice (soffice.exe ho·∫∑c soffice.com)",
            filetypes=[("Executable files", "*.exe *.com"), ("All files", "*.*")]
        )
        if filename:
            self.libreoffice_var.set(filename)
            self.refresh_tools()  # L√†m m·ªõi sau khi thay ƒë·ªïi ƒë∆∞·ªùng d·∫´n
    
    def save_config(self):
        """L∆∞u c·∫•u h√¨nh hi·ªán t·∫°i"""
        config = {
            "a4_excel_file": self.a4_excel_var.get(),
            "a4_word_template": self.a4_template_var.get(),
            "a5_excel_file": self.a5_excel_var.get(),
            "a5_word_template": self.a5_template_var.get(),
            "output_folder": self.output_var.get(),
            "libreoffice_path": self.libreoffice_var.get(),
            "batch_size": self.config.config["batch_size"],
            "default_format": self.format_var.get(),
            "preferred_tool": self.tool_var.get() or self.converter.current_tool
        }
        self.config.save_config(config)
        messagebox.showinfo("Th√¥ng b√°o", "ƒê√£ l∆∞u c·∫•u h√¨nh th√†nh c√¥ng!")
    
    def start_processing(self):
        """B·∫Øt ƒë·∫ßu x·ª≠ l√Ω trong thread ri√™ng"""
        self.start_button.config(state='disabled')
        self.progress_var.set(0)
        self.status_var.set("ƒêang x·ª≠ l√Ω...")
        self.log_text.delete(1.0, tk.END)
        
        # Ch·∫°y x·ª≠ l√Ω trong thread ri√™ng ƒë·ªÉ kh√¥ng block GUI
        thread = threading.Thread(target=self.process_data)
        thread.daemon = True
        thread.start()
    
    def process_data(self):
        """X·ª≠ l√Ω d·ªØ li·ªáu ch√≠nh"""
        try:
            # C·∫≠p nh·∫≠t config
            config = {
                "a4_excel_file": self.a4_excel_var.get(),
                "a4_word_template": self.a4_template_var.get(),
                "a5_excel_file": self.a5_excel_var.get(),
                "a5_word_template": self.a5_template_var.get(),
                "output_folder": self.output_var.get(),
                "libreoffice_path": self.libreoffice_var.get(),
                "batch_size": self.config.config["batch_size"],
                "default_format": self.format_var.get(),
                "preferred_tool": self.tool_var.get() # L·∫•y c√¥ng c·ª• ƒë∆∞·ª£c ch·ªçn t·ª´ config
            }
            
            # C·∫≠p nh·∫≠t converter v·ªõi config m·ªõi
            self.converter.config = config
            
            current_format = self.format_var.get()
            self.log(f"B·∫Øt ƒë·∫ßu x·ª≠ l√Ω ƒë·ªãnh d·∫°ng {current_format}...")
            
            if current_format == "A4":
                self.process_a4_format(config)
            else:
                self.process_a5_format(config)
            
        except Exception as e:
            self.log(f"L·ªói: {str(e)}")
            self.status_var.set("L·ªói")
            messagebox.showerror("L·ªói", f"C√≥ l·ªói x·∫£y ra: {str(e)}")
        
        finally:
            self.start_button.config(state='normal')
    
    def process_a4_format(self, config):
        """X·ª≠ l√Ω ƒë·ªãnh d·∫°ng A4 - m·ªôt s·∫£n ph·∫©m/trang"""
        try:
            self.log(f"ƒêang x·ª≠ l√Ω ƒë·ªãnh d·∫°ng A4...")
            self.log(f"File Excel: {config['a4_excel_file']}")
            self.log(f"Template: {config['a4_word_template']}")
            self.log(f"Th∆∞ m·ª•c xu·∫•t: {config['output_folder']}")
            
            # Ki·ªÉm tra file t·ªìn t·∫°i
            if not os.path.exists(config['a4_excel_file']):
                raise FileNotFoundError(f"Kh√¥ng t√¨m th·∫•y file Excel A4: {config['a4_excel_file']}")
            if not os.path.exists(config['a4_word_template']):
                raise FileNotFoundError(f"Kh√¥ng t√¨m th·∫•y template A4: {config['a4_word_template']}")
            
            # T·∫°o th∆∞ m·ª•c xu·∫•t
            os.makedirs(config['output_folder'], exist_ok=True)
            
            # ƒê·ªçc Excel
            self.log("ƒêang ƒë·ªçc file Excel A4...")
            df = pd.read_excel(config['a4_excel_file'])
            self.log(f"ƒê√£ ƒë·ªçc {len(df)} d√≤ng d·ªØ li·ªáu")
            
            # T√≠nh to√°n t·ªïng s·ªë b∆∞·ªõc
            total_steps = len(df) + 2  # Word + PDF + Merge
            self.progress_tracker = ProgressTracker(total_steps)
            
            # X·ª≠ l√Ω t·∫°o file Word
            self.log("ƒêang t·∫°o file Word A4...")
            word_files = self.process_a4_word_files(df, config)
            
            if not word_files:
                raise Exception("Kh√¥ng t·∫°o ƒë∆∞·ª£c file Word n√†o")
            
            self.log(f"ƒê√£ t·∫°o {len(word_files)} file Word")
            
            # Chuy·ªÉn ƒë·ªïi PDF
            self.log("ƒêang chuy·ªÉn ƒë·ªïi sang PDF...")
            pdf_files = self.convert_to_pdf_sequential(word_files, config)
            
            if not pdf_files:
                raise Exception("Kh√¥ng chuy·ªÉn ƒë·ªïi ƒë∆∞·ª£c file PDF n√†o")
            
            self.log(f"ƒê√£ chuy·ªÉn ƒë·ªïi {len(pdf_files)} file PDF")
            
            # G·ªôp PDF
            self.log("ƒêang g·ªôp file PDF...")
            merged_pdf = self.merge_pdfs(pdf_files, config['output_folder'], "A4-Auto-Tong.pdf")
            
            # D·ªçn d·∫πp
            self.cleanup_files(word_files + pdf_files)
            
            self.log("Ho√†n th√†nh! File PDF ƒë√£ ƒë∆∞·ª£c g·ªôp th√†nh c√¥ng!")
            self.status_var.set("Ho√†n th√†nh")
            self.progress_var.set(100)
            
            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ x·ª≠ l√Ω xong! File PDF: {merged_pdf}")
            
        except Exception as e:
            self.log(f"L·ªói x·ª≠ l√Ω A4: {str(e)}")
            raise
    
    def process_a5_format(self, config):
        """X·ª≠ l√Ω ƒë·ªãnh d·∫°ng A5 - hai s·∫£n ph·∫©m/trang"""
        try:
            self.log(f"ƒêang x·ª≠ l√Ω ƒë·ªãnh d·∫°ng A5...")
            self.log(f"File Excel: {config['a5_excel_file']}")
            self.log(f"Template: {config['a5_word_template']}")
            self.log(f"Th∆∞ m·ª•c xu·∫•t: {config['output_folder']}")
            
            # Ki·ªÉm tra file t·ªìn t·∫°i
            if not os.path.exists(config['a5_excel_file']):
                raise FileNotFoundError(f"Kh√¥ng t√¨m th·∫•y file Excel A5: {config['a5_excel_file']}")
            if not os.path.exists(config['a5_word_template']):
                raise FileNotFoundError(f"Kh√¥ng t√¨m th·∫•y template A5: {config['a5_word_template']}")
            
            # T·∫°o th∆∞ m·ª•c xu·∫•t
            os.makedirs(config['output_folder'], exist_ok=True)
            
            # ƒê·ªçc Excel
            self.log("ƒêang ƒë·ªçc file Excel A5...")
            df = pd.read_excel(config['a5_excel_file'])
            self.log(f"ƒê√£ ƒë·ªçc {len(df)} d√≤ng d·ªØ li·ªáu")
            
            # T√≠nh to√°n t·ªïng s·ªë b∆∞·ªõc
            total_steps = len(df) // 2 + 2  # Word + PDF + Merge
            self.progress_tracker = ProgressTracker(total_steps)
            
            # X·ª≠ l√Ω tu·∫ßn t·ª± t·∫°o file Word
            self.log("ƒêang t·∫°o file Word A5...")
            word_files = self.process_a5_word_files_sequential(df, config)
            
            if not word_files:
                raise Exception("Kh√¥ng t·∫°o ƒë∆∞·ª£c file Word n√†o")
            
            self.log(f"ƒê√£ t·∫°o {len(word_files)} file Word")
            
            # Chuy·ªÉn ƒë·ªïi PDF tu·∫ßn t·ª±
            self.log("ƒêang chuy·ªÉn ƒë·ªïi sang PDF...")
            pdf_files = self.convert_to_pdf_sequential(word_files, config)
            
            if not pdf_files:
                raise Exception("Kh√¥ng chuy·ªÉn ƒë·ªïi ƒë∆∞·ª£c file PDF n√†o")
            
            self.log(f"ƒê√£ chuy·ªÉn ƒë·ªïi {len(pdf_files)} file PDF")
            
            # G·ªôp PDF
            self.log("ƒêang g·ªôp file PDF...")
            merged_pdf = self.merge_pdfs(pdf_files, config['output_folder'], "A5-Auto-Tong.pdf")
            
            # D·ªçn d·∫πp
            self.cleanup_files(word_files + pdf_files)
            
            self.log("Ho√†n th√†nh! File PDF ƒë√£ ƒë∆∞·ª£c g·ªôp th√†nh c√¥ng!")
            self.status_var.set("Ho√†n th√†nh")
            self.progress_var.set(100)
            
            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ x·ª≠ l√Ω xong! File PDF: {merged_pdf}")
            
        except Exception as e:
            self.log(f"L·ªói x·ª≠ l√Ω A5: {str(e)}")
            raise
    
    def process_a4_word_files(self, df, config):
        """X·ª≠ l√Ω file Word A4 - m·ªôt s·∫£n ph·∫©m/trang"""
        word_files = []
        errors = []
        
        # X·ª≠ l√Ω t·ª´ng d√≤ng tu·∫ßn t·ª±
        for i, row in df.iterrows():
            try:
                # Load template
                doc = DocxTemplate(config['a4_word_template'])
                
                # T·∫°o context
                context = self.create_a4_context(row)
                
                # Render template
                doc.render(context)
                
                # L∆∞u file Word
                temp_word_file = os.path.join(config['output_folder'], f"temp_output_{i + 1}.docx")
                doc.save(temp_word_file)
                
                if os.path.exists(temp_word_file):
                    word_files.append(temp_word_file)
                    self.log(f"ƒê√£ t·∫°o: {os.path.basename(temp_word_file)}")
                else:
                    error_msg = f"Kh√¥ng th·ªÉ t·∫°o file Word: {temp_word_file}"
                    errors.append(error_msg)
                    self.log(f"L·ªói: {error_msg}")
                
                # C·∫≠p nh·∫≠t progress
                self.progress_tracker.update()
                progress = self.progress_tracker.get_progress()
                self.progress_var.set(progress)
                self.status_var.set(f"ƒêang t·∫°o Word A4... {len(word_files)}/{len(df)}")
                
            except Exception as e:
                error_msg = f"L·ªói khi x·ª≠ l√Ω d√≤ng {i+1}: {e}"
                errors.append(error_msg)
                self.log(f"L·ªói: {error_msg}")
        
        if errors:
            self.log(f"C√≥ {len(errors)} l·ªói x·∫£y ra")
        
        return word_files
    
    def process_a5_word_files_sequential(self, df, config):
        """X·ª≠ l√Ω file Word A5 tu·∫ßn t·ª± - hai s·∫£n ph·∫©m/trang"""
        word_files = []
        errors = []
        
        # X·ª≠ l√Ω t·ª´ng c·∫∑p 2 d√≤ng tu·∫ßn t·ª±
        for i in range(0, len(df), 2):
            try:
                # Load template
                doc = DocxTemplate(config['a5_word_template'])
                
                # L·∫•y d·ªØ li·ªáu
                row_1 = df.iloc[i]
                row_2 = df.iloc[i + 1] if i + 1 < len(df) else None
                
                # T·∫°o context
                context = self.create_a5_context(row_1, row_2)
                
                # Render template
                doc.render(context)
                
                # L∆∞u file Word
                temp_word_file = os.path.join(config['output_folder'], f"temp_output_{i//2 + 1}.docx")
                doc.save(temp_word_file)
                
                if os.path.exists(temp_word_file):
                    word_files.append(temp_word_file)
                    self.log(f"ƒê√£ t·∫°o: {os.path.basename(temp_word_file)}")
                else:
                    error_msg = f"Kh√¥ng th·ªÉ t·∫°o file Word: {temp_word_file}"
                    errors.append(error_msg)
                    self.log(f"L·ªói: {error_msg}")
                
                # C·∫≠p nh·∫≠t progress
                self.progress_tracker.update()
                progress = self.progress_tracker.get_progress()
                self.progress_var.set(progress)
                self.status_var.set(f"ƒêang t·∫°o Word A5... {len(word_files)}/{len(df)//2}")
                
            except Exception as e:
                error_msg = f"L·ªói khi x·ª≠ l√Ω c·∫∑p d√≤ng {i+1} v√† {i+2}: {e}"
                errors.append(error_msg)
                self.log(f"L·ªói: {error_msg}")
        
        if errors:
            self.log(f"C√≥ {len(errors)} l·ªói x·∫£y ra")
        
        return word_files
    
    def create_a4_context(self, row):
        """T·∫°o context cho template A4"""
        return {
            "NganhHang": self.limit_string(row['NganhHang'], max_length=29),
            "Hang": row['Hang'] if pd.notnull(row['Hang']) else "",
            "SAP": row['SAP'] if pd.notnull(row['SAP']) else "",
            "Model": row['Model'] if pd.notnull(row['Model']) else "",
            "GiaNiemYet": self.format_currency(row['GiaNiemYet']),
            "GiaKM": self.format_currency(row['GiaKM']),
            "G": self.format_percentage(row['G']),
            "Qua": row['Qua'] if pd.notnull(row['Qua']) else "",
            "ThoiGian": row['ThoiGian']
        }
    
    def create_a5_context(self, row_1, row_2):
        """T·∫°o context cho template A5"""
        context = {}
        
        # D√≤ng 1
        context.update({
            "NganhHang": self.limit_string(row_1['NganhHang'], max_length=31),
            "Hang": row_1['Hang'] if pd.notnull(row_1['Hang']) else "",
            "SAP": row_1['SAP'] if pd.notnull(row_1['SAP']) else "",
            "Model": row_1['Model'] if pd.notnull(row_1['Model']) else "",
            "GiaNiemYet": self.format_currency(row_1['GiaNiemYet']),
            "GiaKM": self.format_currency(row_1['GiaKm']),
            "G": self.format_percentage(row_1['G']),
            "Qua": row_1['Qua'] if pd.notnull(row_1['Qua']) else "",
            "ThoiGian": row_1['ThoiGian']
        })
        
        # D√≤ng 2 (n·∫øu c√≥)
        if row_2 is not None:
            context.update({
                "NganhHang1": self.limit_string(row_2['NganhHang'], max_length=31),
                "Hang1": row_2['Hang'] if pd.notnull(row_2['Hang']) else "",
                "SAP1": row_2['SAP'] if pd.notnull(row_2['SAP']) else "",
                "Model1": row_2['Model'] if pd.notnull(row_2['Model']) else "",
                "GiaNiemYet1": self.format_currency(row_2['GiaNiemYet']),
                "GiaKM1": self.format_currency(row_2['GiaKm']),
                "G1": self.format_percentage(row_2['G']),
                "Qua1": row_2['Qua'] if pd.notnull(row_2['Qua']) else "",
                "ThoiGian1": row_2['ThoiGian']
            })
        else:
            context.update({
                "NganhHang1": "", "Hang1": "", "SAP1": "", "Model1": "",
                "GiaNiemYet1": "", "GiaKM1": "", "G1": "", "Qua1": "", "ThoiGian1": ""
            })
        
        return context
    
    def format_currency(self, value):
        """Format currency"""
        if pd.isna(value):
            return ""
        try:
            return "{:,.0f}ƒë".format(float(str(value).replace(',', '')))
        except (ValueError, TypeError):
            return str(value)
    
    def format_percentage(self, value):
        """Format percentage"""
        if pd.isna(value):
            return ""
        try:
            return "{:.0f}%".format(float(str(value).replace('%', '')))
        except (ValueError, TypeError):
            return str(value)
    
    def limit_string(self, text, max_length=33):
        """Limit string"""
        if pd.isna(text):
            return ""
        text = str(text)
        return text[:max_length-3] + "..." if len(text) > max_length else text
    
    def convert_to_pdf_sequential(self, word_files, config):
        """Chuy·ªÉn ƒë·ªïi PDF tu·∫ßn t·ª±"""
        pdf_files = []
        
        for word_file in word_files:
            try:
                pdf_file = self.converter.convert_to_pdf(word_file)
                if pdf_file:
                    pdf_files.append(pdf_file)
                    self.log(f"ƒê√£ chuy·ªÉn ƒë·ªïi: {os.path.basename(pdf_file)}")
                else:
                    self.log(f"L·ªói chuy·ªÉn ƒë·ªïi: {os.path.basename(word_file)}")
                
                # C·∫≠p nh·∫≠t progress
                self.progress_tracker.update()
                progress = self.progress_tracker.get_progress()
                self.progress_var.set(progress)
                self.status_var.set(f"ƒêang chuy·ªÉn ƒë·ªïi PDF... {len(pdf_files)}/{len(word_files)}")
                
            except Exception as e:
                self.log(f"L·ªói chuy·ªÉn ƒë·ªïi {word_file}: {e}")
        
        return pdf_files
    
    def merge_pdfs(self, pdf_files, output_folder, output_name):
        """G·ªôp c√°c file PDF"""
        try:
            merger = PdfWriter()
            for pdf in pdf_files:
                merger.append(pdf)
            
            merged_pdf = os.path.join(output_folder, output_name)
            merger.write(merged_pdf)
            merger.close()
            
            self.log(f"ƒê√£ g·ªôp {len(pdf_files)} file PDF th√†nh: {merged_pdf}")
            return merged_pdf
            
        except Exception as e:
            self.log(f"L·ªói khi g·ªôp PDF: {e}")
            raise
    
    def cleanup_files(self, files):
        """D·ªçn d·∫πp file t·∫°m"""
        for file_path in files:
            try:
                if os.path.exists(file_path):
                    os.remove(file_path)
                    self.log(f"ƒê√£ x√≥a: {os.path.basename(file_path)}")
            except Exception as e:
                self.log(f"L·ªói khi x√≥a {file_path}: {e}")
    
    def run(self):
        """Ch·∫°y GUI"""
        self.root.mainloop()

    # ƒê√£ x√≥a preview_template theo y√™u c·∫ßu
    
    def show_tools_info(self):
        """Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ c√°c c√¥ng c·ª• chuy·ªÉn ƒë·ªïi"""
        try:
            tools_window = tk.Toplevel(self.root)
            tools_window.title("Th√¥ng tin c√¥ng c·ª• chuy·ªÉn ƒë·ªïi PDF")
            tools_window.geometry("600x500")
            tools_window.resizable(True, True)
            
            # Frame ch√≠nh
            main_frame = ttk.Frame(tools_window, padding="10")
            main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
            
            # Ti√™u ƒë·ªÅ
            title_label = ttk.Label(main_frame, text="C√¥ng c·ª• chuy·ªÉn ƒë·ªïi PDF", font=("Arial", 14, "bold"))
            title_label.grid(row=0, column=0, columnspan=2, pady=(0, 10))
            
            # Text widget ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin
            text_widget = tk.Text(main_frame, wrap=tk.WORD, height=20)
            scrollbar = ttk.Scrollbar(main_frame, orient=tk.VERTICAL, command=text_widget.yview)
            text_widget.configure(yscrollcommand=scrollbar.set)
            
            text_widget.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
            scrollbar.grid(row=1, column=1, sticky=(tk.N, tk.S))
            
            # L·∫•y th√¥ng tin c√¥ng c·ª•
            all_tools = self.converter.get_all_tools_info()
            current_tool = self.converter.current_tool
            
            # Hi·ªÉn th·ªã th√¥ng tin
            info_text = "=== TH√îNG TIN C√îNG C·ª§ CHUY·ªÇN ƒê·ªîI PDF ===\n\n"
            
            for tool_name, tool_info in all_tools.items():
                status = "‚úì C√ì S·∫¥N" if tool_info['available'] else "‚úó KH√îNG C√ì"
                current = " (ƒêANG S·ª¨ D·ª§NG)" if tool_name == current_tool else ""
                
                info_text += f"üîß {tool_info['name']} {status}{current}\n"
                info_text += f"   M√¥ t·∫£: {tool_info['description']}\n"
                info_text += f"   ƒê·ªô ∆∞u ti√™n: {tool_info['priority']}\n\n"
            
            info_text += "\n=== H∆Ø·ªöNG D·∫™N C√ÄI ƒê·∫∂T ===\n\n"
            info_text += "1. python-docx2pdf (üöÄ Khuy·∫øn ngh·ªã):\n"
            info_text += "   pip install docx2pdf\n\n"
            info_text += "2. LibreOffice / LibreOffice Portable (Fallback):\n"
            info_text += "   - D√πng b·∫£n Portable: Ch·ªâ c·∫ßn gi·∫£i n√©n c·∫°nh ·ª©ng d·ª•ng (th∆∞ m·ª•c 'LibreOfficePortable').\n"
            info_text += "   - Ho·∫∑c ƒë·∫∑t bi·∫øn m√¥i tr∆∞·ªùng LIBREOFFICE_PATH tr·ªè t·ªõi 'soffice.exe' ho·∫∑c 'soffice.com'.\n"
            info_text += "   - Ho·∫∑c ch·ªçn ƒë∆∞·ªùng d·∫´n th·ªß c√¥ng b·∫±ng n√∫t 'Ch·ªçn'.\n\n"
            
            info_text += "=== L∆ØU √ù ===\n"
            info_text += "- ∆Øu ti√™n python-docx2pdf. N·∫øu l·ªói s·∫Ω fallback sang LibreOffice.\n"
            
            text_widget.insert(tk.END, info_text)
            text_widget.config(state=tk.DISABLED)
            
            # Button ƒë√≥ng
            ttk.Button(main_frame, text="ƒê√≥ng", command=tools_window.destroy).grid(row=2, column=0, columnspan=2, pady=(10, 0))
            
            # Configure grid weights
            tools_window.columnconfigure(0, weight=1)
            tools_window.rowconfigure(0, weight=1)
            main_frame.columnconfigure(0, weight=1)
            main_frame.rowconfigure(1, weight=1)
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ hi·ªÉn th·ªã th√¥ng tin c√¥ng c·ª•: {e}")

def main():
    """H√†m ch√≠nh"""
    try:
        app = AutoPriceGUI()
        app.run()
    except Exception as e:
        print(f"L·ªói kh·ªüi ƒë·ªông GUI: {e}")
        # Fallback v·ªÅ command line n·∫øu GUI l·ªói
        run_command_line()

def run_command_line():
    """Ch·∫°y phi√™n b·∫£n command line c≈©"""
    print("Kh·ªüi ƒë·ªông phi√™n b·∫£n command line...")
    print("Vui l√≤ng s·ª≠ d·ª•ng A4-AUTO.py ho·∫∑c A5-AUTO.py cho command line")

if __name__ == "__main__":
    main()
